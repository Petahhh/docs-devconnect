---
title: Installing Developer Connect on VMware Tanzu Application Service for VMs
owner: DevConnect
---

<strong><%= modified_date %></strong>

This topic describes how to install <%= vars.product_full %> on <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).

## <a id="Overview"></a> Overview

To install <%= vars.product_short %> on <%= vars.app_runtime_abbr %>
you must configure an app manifest and variable file for <%= vars.product_short %>.
After you configure the files, you must push the <%= vars.product_short %> app to <%= vars.app_runtime_abbr %>.

If you want to install <%= vars.product_short %> on Kubernetes instead,
follow the procedure in
[kubernetes-deployment](https://github.com/pivotal/DevConnect/blob/master/kubernetes-deployment) in GitHub.

To install <%= vars.product_short %> on <%= vars.app_runtime_abbr %>:

1. [Create the App Manifest](#manifest)
1. [Create a Variables Configuration File](#config)
1. [Push the <%= vars.product_short %> App](#push)

## <a id="prereq"></a>Prerequisites

Before you install <%= vars.product_short %>, you must have:

- Followed the procedures in [Preparing <%= vars.product_full %> for Deployment](./preparing.html).
- A <%= vars.app_runtime_abbr %> deployment.
- Access to the Tanzu Network Registry. This is a private container image registry provided by VMware.
- A SQL database. You can use the VMware Tanzu SQL [MySQL] tile for a database.
  See [VMware Tanzu SQL [MySQL]](https://docs.pivotal.io/p-mysql/).

## <a id="manifest"></a> Create the App Manifest

<%# The following is our speculation on how Alana will deploy DevConnect.
It should be updated after this story, https://www.pivotaltracker.com/story/show/168938874
to reflect how to actually deploy the packaged DevConnect.  %>

You must create an app manifest file to `cf push` <%= vars.product_short %>.<br><br>
To create the manifest file:


1. Download and unzip the <%= vars.product_short %> product file from
[<%= vars.product_network %>](https://network.pivotal.io/products/developer-connect/).

1. Create a manifest file named `devconnect-manifest.yml` at the root level of the
<%= vars.product_short %> directory.


1. Add the following contents to the manifest file:

    ```
    ---
    applications:
      - name: devconnect
        memory: 1G
        instances: 1
        routes:
        - route: ((devconnect-route))
        docker:
          image: ((devconnect-image-location))
          username: ((devconnect-image-registry-username))
        command: ./devconnect-linux
        env:
          DEVCONNECT_AUTH_CLIENT_ID: ((devconnect-auth-client-id))
          DEVCONNECT_AUTH_CLIENT_SECRET: ((devconnect-auth-client-secret))
          DEVCONNECT_AUTH_BASE_URL: ((devconnect-auth-base-url))
          DEVCONNECT_SESSION_SECRET: ((session-secret))
          DEVCONNECT_DB_TYPE: ((db-type))
          DEVCONNECT_DB_HOST: ((db-host))
          DEVCONNECT_DB_PORT: ((db-port))
          DEVCONNECT_DB_USER_NAME: ((db-username))
          DEVCONNECT_DB_NAME: ((db-name))
          DEVCONNECT_DB_PASSWORD: ((db-password))
          DEVCONNECT_DB_MAX_CONNECTIONS: ((db-max-connections))
          DEVCONNECT_ENTITLEMENTS_CONFIG_STRING: ((devconnect-entitlements-config))
    ```

## <a id="config"></a> Create a Variables Configuration File

You must create a configuration file to populate variable interpolation values
for <%= vars.product_short %>.

To create and configure the configuration file:

1. Create a configuration file named `devconnect-vars.yml` at the root level of the
<%= vars.product_short %> directory.
1. Add credentials information to the configuration file.
  See [Add <%= vars.product_short %> and Database Credentials](#config-creds) below.
1. Add an entitlements config to the configuration file.
  See [Add the Entitlements Config](#config-entitle) below.

For an example of a configuration file, see [Example Configuration File](#example-config) below.

### <a id="config-creds"></a> Add <%= vars.product_short %> and Database Credentials

To add and configure credentials for <%= vars.product_short %> and a backing database:

1. Add the following credentials to the configuration file:

    ```
    ---
    devconnect-image-location: registry.pivotal.io/developer-connect/developer-connect
    devconnect-image-registry-username: DEVCONNECT-REGISTRY-USERNAME
    devconnect-route: DEVCONNECT-ROUTE
    devconnect-auth-client-id: LOGIN-ID
    devconnect-auth-client-secret: LOGIN-SECRET
    devconnect-auth-base-url: BASE-URL
    session-secret: SESSION-SECRET
    ```

    Where:

    <table>
      <tr>
        <th width=35%>Placeholder</th>
        <th>Value</th>
      </tr>

      <tr>
        <td><code>DEVCONNECT-REGISTRY-USERNAME</code></td>
        <td>Your username for Tanzu Network Registry.
             This is the username you use to log in to <%= vars.product_network %>.</td>
      </tr>

      <tr>
        <td><code>DEVCONNECT-ROUTE</code></td>
        <td>The route you created to access the <%= vars.product_short %> server.</td>
      </tr>

      <tr>
        <td><code>LOGIN-ID</code></td>
        <td>The login client ID you recorded in
          <a href="./preparing.html#devconnect-idp">Configure the <%= vars.product_short %> IdP</a>.
          By default, this is <code>devconnect&#95;login&#95;client</code>.</td>
      </tr>

      <tr>
        <td><code>LOGIN-SECRET</code></td>
        <td>The login client secret you recorded in
          <a href="./preparing.html#devconnect-idp">Configure the <%= vars.product_short %> IdP</a>.</td>
      </tr>

      <tr>
        <td><code>BASE-URL</code></td>
        <td>The authorization base URL you recorded in
          <a href="./preparing.html#devconnect-idp">Configure the <%= vars.product_short %> IdP</a>.</td>
      </tr>

      <tr>
        <td><code>SESSION-SECRET</code></td>
        <td>This is an arbitrary string used to encrypt session cookies.</td>
      </tr>
      </table>

1. Append the following database credentials to the configuration file:

    ```
    db-type: DATABASE-TYPE
    db-host: DATABASE-HOST
    db-port: DATABASE-PORT
    db-username: DATABASE-USERNAME
    db-name: DATABASE-NAME
    db-password: DATABASE-PASSWORD
    db-max-connections: DATABASE-CONNECTIONS
    ```
    Where:

    <table>
      <tr>
        <th width=25%>Placeholder</th>
        <th>Value</th>
      </tr>


        <tr>
          <td><code>DATABASE-TYPE</code></td>
          <td>This is the SQL database you are using with <%= vars.product_short %>.
             <%= vars.product_short %> supports <code>mysql</code> and <code>postgres</code>.</td>
        </tr>

        <tr>
          <td><code>DATABASE-HOST</code></td>
          <td>The host for your SQL database.</td>
        </tr>

        <tr>
          <td><code>DATABASE-PORT</code></td>
          <td>The port number for your SQL database.</td>
        </tr>

        <tr>
          <td><code>DATABASE-USERNAME</code></td>
          <td>The username for your SQL database.</td>
        </tr>

        <tr>
          <td><code>DATABASE-NAME</code></td>
          <td>The name of your SQL database.</td>
        </tr>

        <tr>
          <td><code>DATABASE-PASSWORD</code></td>
          <td>The password for your SQL database.</td>
        </tr>

        <tr>
          <td><code>DATABASE-CONNECTIONS</code></td>
          <td>The maximum number of connections that you want <%= vars.product_short %> to create to the database.
            You should set this value to be lower than the maximum number of concurrent connections the database permits.
            The default value is <code>3</code>.</td>
        </tr>
    </table>


### <a id="config-entitle"></a> Add Entitlements Config

The entitlements config contains configuration information in a `devconnect-entitlements-config` key.
The value of this key is a YAML object with values you must configure.

To create and configure the `devconnect-entitlements-config` key:

1. Append the following to the configuration file:

    ```
    devconnect-entitlements-config: |
    ```
1. Add org and space templates to the configuration file.
    See [Add Org and Space Templates](#config-org-space) below.
1. (Optional) Add custom template variables to the configuration file.
    See [(Optional) Add Custom Variables](#config-custom) below.
1. Add <%= vars.app_runtime_abbr %> information to the configuration file.
    See [Add <%= vars.app_runtime_abbr %> Configurations](#config-tas) below.

#### <a id="config-org-space"></a> Add Org and Space Templates

You can configure templates for the org and space names that <%= vars.product_short%> creates for new projects.
To configure the templates, use the `orgNameTemplate` and `spaceNameTemplate` keys.

To add and configure org and space name templates:

1. Append the following template variables to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
      orgNameTemplate: 'ORG-TEMPLATE'
      spaceNameTemplate: 'SPACE-TEMPLATE'
    ```

1. Replace `ORG-TEMPLATE` and `SPACE-TEMPLATE` with template fields.<br>
  The following table describes the available template fields:

    <table>
      <tr>
        <th width=35%>Variable</th>
        <th>Description</th>
      </tr>

      <tr>
        <td><code>{{RandomAdjective}}</code></td>
        <td>A randomly chosen adjective</td>
      </tr>

      <tr>
        <td><code>{{RandomNoun}}</code></td>
        <td>A randomly chosen noun</td>
      </tr>

      <tr>
        <td><code>{{DeveloperUsername}}</code></td>
        <td>The username of the developer creating the project</td>
      </tr>

      <tr>
        <td><code>{{DeveloperEmail}}</code></td>
        <td>The email address of the developer creating the project</td>
      </tr>

      <tr>
        <td><code>{{RegionName}}</code></td>
        <td>The region that <%= vars.app_runtime_abbr %> is located in</td>
      </tr>

      <tr>
        <td><code>{{EnvironmentName}}</code></td>
        <td>The name of the environment</td>
      </tr>

      <tr>
        <td><code>{{ProjectName}}</code></td>
        <td>The project name the developer sets when they create the project</td>
      </tr>
    </table>
    <br>
    For example:

    ```ruby
    {{RandomAdjective}}-{{ProjectName}}-{{DeveloperUsername}}-{{EnvironmentName}}
    ```


#### <a id="config-custom"></a> (Optional) Add Custom Variables

You can define custom template variables
and use these variables in the `orgNameTemplate` and `spaceNameTemplate` keys.
You can create more than one custom template.

To add and configure custom templates:

1. Append the following template variables to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
    customTemplateVariables:
    - variableName: CUSTOM-VAR
      displayName: CUSTOM-VAR-DISPLAY
      displayText: CUSTOM-VAR-DISPLAY-TEXT
      characterLimit: CHAR-LIMIT
    ```

    Where:
    <table>
      <tr>
        <th width="33%">Field</th>
        <th>Description</th>
      </tr>

      <tr>
        <td><code>CUSTOM-VAR</code></td>
        <td>The variable name used in the <code>orgNameTemplate</code>
          or <code>spaceNameTemplate</code> key.</td>
      </tr>

      <tr>
        <td><code>CUSTOM-VAR-DISPLAY</code></td>
        <td>The UI label used to identify the field.</td>
      </tr>

      <tr>
        <td><code>CUSTOM-VAR-DISPLAY-TEXT</code></td>
        <td> (Optional) The placeholder text shown in the UI field.</td>
      </tr>

      <tr>
        <td><code>CHAR-LIMIT</code></td>
        <td>The maximum number of permitted characters for a field.</td>
      </tr>
    </table><br>

    For example:

    ```
    customTemplateVariables:
    - variableName: CostCenter
      displayName: Cost Center
      displayText: Please enter your Cost Center
      characterLimit: 10
    ```

#### <a id="config-tas"></a> Add <%= vars.app_runtime_abbr %> Configurations

You must add information for each <%= vars.app_runtime_abbr %> deployment
you want to add to <%= vars.product_short %>.
You add the <%= vars.app_runtime_abbr %> information to a `foundations` array.

To add and configure the `foundations` array:

1. Append the following identification information to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
    foundations:
    - name: "TAS-NAME"
      uuid: "TAS-UUID"
      region: "TAS-REGION"
      apiUrl: "TAS-URL"
    ```
    Where:

    <table>

      <tr>
        <th width="28%">Placeholder</th>
        <th>Description</th>
      </tr>

      <tr>
        <td><code>TAS-NAME</code></td>
        <td>A human-readable name for the <%= vars.app_runtime_abbr %> deployment.</td>
      </tr>

      <tr>
        <td><code>TAS-UUID</code></td>
        <td>The generated UUID for the <%= vars.app_runtime_abbr %> deployment.</td>
      </tr>

      <tr>
        <td><code>TAS-REGION</code></td>
        <td>The region that the <%= vars.app_runtime_abbr %> deployment is located in.
          This is used to group environments together.</td>
      </tr>

      <tr>
        <td><code>TAS-URL</code></td>
        <td>The Cloud Foundry API (CAPI) URL for the <%= vars.app_runtime_abbr %>.</td>
      </tr>

    </table>

1. Append the following `cf-mgmt` credentials information to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
    cfMgmtRepo:
      configDir: CONFIG-DIRECTORY
      repoUrl: REPO-SSH-URL
      privateKey: |
        PRIVATE-KEY
      privateKeyPassPhrase: PASSWORD
    ```
      Where:
      <table>

      <tr>
        <th width="29%">Placeholder</th>
        <th>Description</th>
      </tr>

      <tr>
        <td>(Optional) <code>CONFIG-DIRECTORY</code></td>
        <td>This is the custom name for your <code>cf-mgmt</code> configuration directory.<br><br>
          This value overrides the default directory name that <code>cf-mgmt</code> creates when you create configuration files.
          The default name is <code>config</code>.
          You should only include this key-value pair if the configuration directory has a different name.
          </td>
      </tr>

      <tr>
        <td><code>REPO-SSH-URL</code></td>
        <td>The SSH URL for your <code>cf-mgmt</code> configuration Git repository </td>
      </tr>

      <tr>
        <td><code>PRIVATE-KEY</code></td>
        <td>The private key for your <code>cf-mgmt</code> configuration Git repository.</td>
      </tr>

      <tr>
        <td><code>PASSWORD</code></td>
        <td>The passphrase for your <code>cf-mgmt</code> configuration Git repository</td>
      </tr>

    </table>
    <br>
    For example:

    ```
    cfMgmtRepo:
      configDir: alternate-config-name
      repoUrl: git@example.com:user/repo.git
      privateKey: |
        -----BEGIN RSA PRIVATE KEY-----
        abcdEFGhIKlmfdskjlfdsfsnjwjnfDHFLDKSNLfjhkldsfnlsFDFDgdj
                  ...
        -----END RSA PRIVATE KEY-----
      privateKeyPassPhrase: password
    ```

1. Append the following OAuth information to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
    oauth:
      authorizeUrl: https://login.SYSTEM-DOMAIN/oauth/authorize
      tokenUrl: https://login.SYSTEM-DOMAIN/oauth/token
      clientId: AUTH-CLIENT-ID
      clientSecret: AUTH-CLIENT-SECRET
      issuerUrl: https://uaa.SYSTEM-DOMAIN/oauth/token
      jwksUrl: https://login.SYSTEM-DOMAIN/token_keys
      authenticationType: IDENTITY-PROVIDER
    ```
    Where:
    <table>

      <tr>
        <th width="29%">Placeholder</th>
        <th>Description</th>
      </tr>

      <tr>
        <td><code>SYSTEM-DOMAIN</code></td>
        <td>The system domain name for the <%= vars.app_runtime_abbr %> deployment.
            You can find your system domain in <%= vars.app_runtime_abbr %> tile
            on the <strong>Domains</strong> pane.</td>
      </tr>

      <tr>
        <td><code>AUTH-CLIENT-ID</code></td>
        <td>The authorization client ID you recorded in
          <a href="./preparing.html#auth-creds">Configure Authorization Code Client Credentials</a>.
          </td>
      </tr>

      <tr>
        <td><code>AUTH-CLIENT-SECRET</code></td>
        <td>The authorization client secret you recorded in
          <a href="./preparing.html#auth-creds">Configure Authorization Code Client Credentials</a>.</td>
      </tr>

      <tr>
        <td><code>IDENTITY-PROVIDER</code></td>
        <td>The type of identity provider that backs the <%= vars.app_runtime_abbr %> UAA.
          <%= vars.product_short%> supports <code>saml</code>, <code>internal</code>, and <code>ldap</code>.</td>
      </tr>

    </table>
    <br>

    <%= vars.product_short%> uses the OAuth information to verify users for login.
        <p class="note"><strong>Note:</strong> You can retrieve these values by
          navigating to the following endpoint:<br>
        <code>https<span>:</span>//uaa.SYSTEM-DOMAIN/.well-known/openid-configuration</code>.
        </p>

1. Append the following tutorial environment information to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
    tutorialEnvironment:
       name: sandbox
       orgRole: auditors
       spaceRole: developers
       quotaName: TAS-QUOTA
    ```
    Where `TAS-QUOTA` is the quota name that is used by the tutorial environment.
    This quota name must exist on the <%= vars.app_runtime_abbr %> deployment.

    <p class="note"><strong>Note:</strong>
      You must not include the <code>tutorialEnvironment</code> section in more than one
      foundation.</p>

    The following table describes the tutorial environment keys:

    <table>

      <tr>
        <th>Keys</th>
        <th>Description</th>
      </tr>

      <tr>
        <td>tutorialEnvironment</td>
        <td>The environment that is used for the tutorial</td>
      </tr>

      <tr>
        <td>tutorialEnvironment.name</td>
        <td>The name of the tutorial environment</td>
      </tr>

      <tr>
        <td>tutorialEnvironment.orgRole</td>
        <td>The org role that is used for the tutorial environment.</td>
      </tr>

      <tr>
        <td>tutorialEnvironment.spaceRole</td>
        <td>The space role that is used for the tutorial environment.</td>
      </tr>

      <tr>
        <td>tutorialEnvironment.quotaName</td>
        <td>The quota name that is used by the tutorial environment.
        This quota name must exist on the <%= vars.app_runtime_abbr %> deployment. </td>
      </tr>
  </table>

1.  Append the following environments information to the configuration file
    in the `devconnect-entitlements-config:` section:

    ```
    environments:
    - name: dev
      orgRole: auditors
      spaceRole: developers
    - name: prod
      orgRole: auditors
      spaceRole: auditors
    ```
    The following table describes the environment keys:

    <table>

      <tr>
        <th>Keys</th>
        <th>Description</th>
      </tr>

      <tr>
        <td>environments</td>
        <td>The list of environments on the <%= vars.app_runtime_abbr %> deployment.</td>
      </tr>

      <tr>
        <td>environments[].name</td>
        <td>The name of the environment</td>
      </tr>

      <tr>
        <td>environments[].orgRole</td>
        <td>The org role that <% vars.product_short %> assigns to the user.
            The user is also added to the <code>users</code> group.</td>
      </tr>

      <tr>
        <td>environments[].spaceRole</td>
        <td>The space role that <% vars.product_short %> assigns to the user. </td>
      </tr>

    </table>


### <a id="example-config"></a> Example Configuration File

The following is a example of an configuration file:

```
---
devconnect-image-location: registry.pivotal.io/developer-connect/developer-connect
devconnect-image-registry-username: DEVCONNECT-REGISTRY-USERNAME
devconnect-route: DEVCONNECT-ROUTE
devconnect-auth-client-id: LOGIN-ID
devconnect-auth-client-secret: LOGIN-SECRET
devconnect-auth-base-url: BASE-URL
session-secret: SESSION-SECRET
db-type: DATABASE-TYPE
db-host: DATABASE-HOST
db-port: DATABASE-PORT
db-username: DATABASE-USERNAME
db-name: DATABASE-NAME
db-password: DATABASE-PASSWORD
db-max-connections: DATABASE-CONNECTIONS
devconnect-entitlements-config: |
    orgNameTemplate: 'ORG-TEMPLATE'
    spaceNameTemplate: 'SPACE-TEMPLATE'
    customTemplateVariables:
    - variableName: CUSTOM-VAR
      displayName: CUSTOM-VAR-DISPLAY
      displayText: CUSTOM-VAR-DISPLAY-TEXT
      characterLimit: CHAR-LIMIT
    foundations:
      - name: "TAS-NAME"
        uuid: "TAS-UUID"
        region: "TAS-REGION"
        apiUrl: "TAS-URL"
      cfMgmtRepo:
        configDir: CONFIG-DIRECTORY
        repoUrl: REPO-SSH-URL
        privateKey: |
          PRIVATE-KEY
        privateKeyPassPhrase: PASSWORD
      oauth:
        authorizeUrl: https://login.SYSTEM-DOMAIN/oauth/authorize
        tokenUrl: https://login.SYSTEM-DOMAIN/oauth/token
        clientId: AUTH-CLIENT-ID
        clientSecret: AUTH-CLIENT-SECRET
        issuerUrl: https://uaa.SYSTEM-DOMAIN/oauth/token
        jwksUrl: https://login.SYSTEM-DOMAIN/token_keys
        authenticationType: IDENTITY-PROVIDER
      tutorialEnvironment:
         name: sandbox
         orgRole: auditors
         spaceRole: developers
         quotaName: TAS-QUOTA
      environments:
      - name: dev
        orgRole: auditors
        spaceRole: developers
      - name: prod
        orgRole: auditors
        spaceRole: auditors
```

## <a id="push"></a>Push the <%= vars.product_short %> App

To push the <%= vars.product_short %> app:

1. Target your CAPI endpoint by running:

    ```
    cf api CF-API-ENDPOINT
    ```
1. Log into your deployment by running:

    ```
    cf login
    ```

1. Target the org and space for the <%= vars.product_short %> app by running:

    ```
    cf target -o ORG -s SPACE
    ```
1. Set an environment variable by running:

    ```
    CF_DOCKER_PASSWORD=DEVCONNECT-REGISTRY-PASSWORD
    ```
      Where `DEVCONNECT-REGISTRY-PASSWORD` is the password for Tanzu Network Registry.
      This is the password you use to log in to <%= vars.product_network %>.
1. Push <%= vars.product_short %> by running:

    ```
    cf push -f devconnect-manifest.yml --vars-file devconnect-vars.yml
    ```
