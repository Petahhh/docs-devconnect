---
title: Configuring Developer Connect
owner: DevConnect
---

<strong><%= modified_date %></strong>

This topic describes how to configure <%= vars.product_full %>.

## <a id="Overview"></a> Overivew

Configure UAA stuff
Install it

See the [kubernetes-deployment README.MD](https://github.com/pivotal/DevConnect/blob/master/kubernetes-deployment) in GitHub.

## <a id="prereq"></a>Prerequisites

Before you configure <%= vars.product_short %>, you must have:

- The User Account and Authentication Command Line Interface (UAAC).
  See [cf-uaac](https://github.com/cloudfoundry/cf-uaac) in GitHub.
- A generated UUID string for each foundation you want to configure.
  The UUID can be arbitrary. However, it must be consistent throughout the configuration
  You can use a tool such as `uuidgen` to generate random UUIDs.
  For more information, see the [man7 website](http://man7.org/linux/man-pages/man1/uuidgen.1.html).
- A route for accessing the <%= vars.product_short %> server.
- One or more running foundations managed by Cloud Foundry Management (cf-mgmt).
See [cf-mgmt](https://github.com/vmwarepivotallabs/cf-mgmt) in GitHub.

## <a id="idp"></a>Configure an IDP

<%= vars.product_short %> requires an OpenID Connect (OIDC) OAuth2 provider.
In this documentation, we refer to this provider as
a <%= vars.product_short %> identity provider (IdP).

The user accounts you configure for the <%= vars.product_short %> IdP
must have the same username and email as the user accounts for each foundation UAA.

VMware recommends you configure your <%= vars.product_short %> IdP
and all of your <%= vars.app_runtime_abbr %> UAAs with one SAML or LDAP IdP.
This reduces administrative overhead and enables a faster and easier
login experience for <%= vars.product_short %> users.

You can use the following as a <%= vars.product_short %> IdP:

- A Single Sign-On for VMware Tanzu instance.
  See [Single Sign-On for VMware Tanzu](https://docs.pivotal.io/p-identity/).
- A UAA instance on an existing foundation.
  See [Configure <%= vars.product_short %> IdP using UAA](#uaac) below.
- A standalone UAA instance.
  See [Configure <%= vars.product_short %> IdP using UAA](#uaac) below.

<!--
Right now this documentation assumes that you've setup a UAA or the Pivotal SSO service to work with DevConnect.
https://www.pivotaltracker.com/story/show/168939821 asks us to document:
  * Test and document using an existing foundation UAA
  * Add section or another page on setting up SAML IDP
  * Add section for configuring Pivotal SSO Service (Note from the Docs team: Can we just link to the SSO docs?)-->

### <a id="devconnect-idp"></a> Configure the <%= vars.product_short %> IdP

You must do this procedure for each foundation you want to add <%= vars.product_short %> to.

To configure a UAA instance for <%= vars.product_short %>:

1. Register a <%= vars.product_short %> login client by running:

    ```
    uaac client add  \
      --name devconnect_login_client --scope openid,profile \
      --authorized_grant_types authorization_code \
      --redirect_uri https://DEVCONNECT-ROUTE/oauth2
    ```
    Where `DEVCONNECT-ROUTE` is the route for accessing the <%= vars.product_short %> server.<br><br>
    When prompted, enter a secret for the login client. <br>

    For example:
    <pre class="terminal">$ uaac client add  \
        --name devconnect&#95;login&#95;client --scope openid,profile \
        --authorized&#95;grant&#95;types authorization&#95;code \
        --redirect&#95;uri https&#58;//my-dev-connect/oauth2 <br>
        New client secret:  *****
        Verify new client secret:  *****</pre>

1. Record the following values from the above command:
    * The login client ID. By default, this is `devconnect_login_client`.
    * The login client secret. This is secret you entered.
1. Record the authorization base URL of the UAA instance.
    The base URL is the host that provides the well-known OpenID configuration.
    It is usually in the form `uaa.sys.FOUNDATION-DOMAIN`, where `YOUR-SYSTEM-DOMAIN` is your
   foundation fully qualified domain name (FQDN).

1. Verify the authorization base URL by querying:

    ```
    https://uaa.sys.FOUNDATION-DOMAIN/.well-known/openid-configuration
    ```

## <a id="foundation-uaa"></a>Configure the Foundation UAA

You must assign a generated UUID to your foundation.
<%= vars.product_short %> uses this UUID to identify your foundation.

To add a foundation to <%= vars.product_short %> you must configure the following clients on the foundation UAA:

- A client with the Client Credentials grant type with `cloud_controller.admin` authority.<br>
  See [Configure Admin Client Credential](#admin-creds) below.
  <%= vars.product_short %> uses this grant type to:
    - Fetch org quotas
    - Create orgs
    - Create spaces
    - Assign org roles
    - Assign space roles

- A client with the Authorization Code grant type with the `openid` scope.<br>
  See [Configure Authorization Code Client Credentials](#auth-creds) below.
  <%= vars.product_short %> uses this grant type to:
    - Verify that a user exists
    - Verify that a user has the correct scopes
    - Create a user in the UAA if the user does not already exist

### <a id="admin-creds"></a> Configure Admin Client Credential

<%= vars.product_short %> needs an admin client credentials to create orgs and spaces for a foundation UAA.
You must do the procedure in this section for each foundation you want to add <%= vars.product_short %> to.

To create admin client credentials for <%= vars.product_short %>:

1. Register a admin client with the Client Credentials grant type by running:

     ```
     uaac client add  \
       --name devconnect_admin_client \
       --authorized_grant_types client_credentials \
       --authorities cloud_controller.admin
     ```
     When prompted, enter a secret for the admin client. <br>

     For example:
     <pre class="terminal">$ uaac client add  \
       --name devconnect&#95;admin&#95;client \
       --authorized&#95;grant&#95;types client&#95;credentials \
       --authorities cloud&#95;controller.admin <br>
       New client secret:  *****
       Verify new client secret:  *****</pre>

1. Record the following values from the above command:
   * The admin client ID. By default, this is `devconnect_admin_client`.
   * The admin client secret. This is secret you entered.

### <a id="auth-creds"></a> Configure Authorization Code Client Credentials

<%= vars.product_short %> needs Authorization Code client credentials to
authenticate and authorize users using the <%= vars.product_short %> IdP.
You must do the procedure in this section for each foundation you want to add <%= vars.product_short %> to.

To create Authorization Code client credentials for <%= vars.product_short %>:

1. Register a authorization client with the Authorization Code grant type by running:

    ```
    uaac client add \
      --name devconnect_foundation_auth_client \
      --scope openid --authorized_grant_types authorization_code \
      --redirect_uri https://DEVCONNECT-ROUTE/api/v1/foundations/FOUNDATION-UUID/oauth2
    ```

    Where:
    + `DEVCONNECT-ROUTE` is the route for accessing the <%= vars.product_short %> server.
    + `FOUNDATION-UUID` is the generated UUID for the foundation.

    When prompted, enter a secret for the authorization client. <br>

    For example:

    <pre class="terminal">$ uaac client add \
        --name devconnect&#95;foundation&#95;auth&#95;client \
        --scope openid --authorized&#95;grant&#95;types authorization&#95;code \
        --redirect&#95;uri https://DEVCONNECT-ROUTE/api/v1/foundations/FOUNDATION-UUID/oauth2</pre>


1. Record the following values from the above command:
    * The authorization client ID. By default, this is `devconnect_foundation_auth_client`.
    * The authorization client secret. This is secret you entered.
